{
  "version": 3,
  "sources": ["../../../../../node_modules/ts-case-convert/lib/caseConvert.js", "../../../../../node_modules/ts-case-convert/lib/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.objectToPascal = exports.toPascal = exports.objectToSnake = exports.toSnake = exports.objectToCamel = exports.toCamel = void 0;\nfunction convertObject(obj, keyConverter) {\n    if (obj === null || typeof obj === 'undefined' || typeof obj !== 'object') {\n        return obj;\n    }\n    const out = (Array.isArray(obj) ? [] : {});\n    for (const [k, v] of Object.entries(obj)) {\n        // eslint-disable-next-line\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        out[keyConverter(k)] = Array.isArray(v)\n            ? v.map((item) => typeof item === 'object' &&\n                !(item instanceof Uint8Array) &&\n                !(item instanceof Date)\n                ? convertObject(item, keyConverter)\n                : item)\n            : v instanceof Uint8Array || v instanceof Date\n                ? v\n                : typeof v === 'object'\n                    ? convertObject(v, keyConverter)\n                    : v;\n    }\n    return out;\n}\nfunction toCamel(term) {\n    return (term.length === 1\n        ? term.toLowerCase()\n        : term\n            .replace(/^([A-Z])/, (m) => m[0].toLowerCase())\n            .replace(/[_-]([a-z0-9])/g, (m) => m[1].toUpperCase()));\n}\nexports.toCamel = toCamel;\nfunction objectToCamel(obj) {\n    return convertObject(obj, toCamel);\n}\nexports.objectToCamel = objectToCamel;\nfunction toSnake(term) {\n    var _a, _b;\n    let result = term;\n    let circuitBreaker = 0;\n    while ((((_a = /([a-z])([0-9])/.exec(result)) === null || _a === void 0 ? void 0 : _a.length) || 0) > 2 &&\n        circuitBreaker < 10) {\n        result = result.replace(/([a-z])([0-9])/, (_all, $1, $2) => `${$1.toLowerCase()}_${$2.toLowerCase()}`);\n        circuitBreaker += 1;\n    }\n    while ((((_b = /(.+?)([A-Z])/.exec(result)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 2 &&\n        circuitBreaker < 10) {\n        result = result.replace(/(.+?)([A-Z])/, (_all, $1, $2) => `${$1.toLowerCase()}_${$2.toLowerCase()}`);\n        circuitBreaker += 1;\n    }\n    return result.toLowerCase();\n}\nexports.toSnake = toSnake;\nfunction objectToSnake(obj) {\n    return convertObject(obj, toSnake);\n}\nexports.objectToSnake = objectToSnake;\nfunction toPascal(term) {\n    return toCamel(term).replace(/^([a-z])/, (m) => m[0].toUpperCase());\n}\nexports.toPascal = toPascal;\nfunction objectToPascal(obj) {\n    return convertObject(obj, toPascal);\n}\nexports.objectToPascal = objectToPascal;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.objectToPascal = exports.toPascal = exports.toCamel = exports.toSnake = exports.objectToSnake = exports.objectToCamel = void 0;\nvar caseConvert_1 = require(\"./caseConvert\");\nObject.defineProperty(exports, \"objectToCamel\", { enumerable: true, get: function () { return caseConvert_1.objectToCamel; } });\nObject.defineProperty(exports, \"objectToSnake\", { enumerable: true, get: function () { return caseConvert_1.objectToSnake; } });\nObject.defineProperty(exports, \"toSnake\", { enumerable: true, get: function () { return caseConvert_1.toSnake; } });\nObject.defineProperty(exports, \"toCamel\", { enumerable: true, get: function () { return caseConvert_1.toCamel; } });\nObject.defineProperty(exports, \"toPascal\", { enumerable: true, get: function () { return caseConvert_1.toPascal; } });\nObject.defineProperty(exports, \"objectToPascal\", { enumerable: true, get: function () { return caseConvert_1.objectToPascal; } });\n"],
  "mappings": "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",
  "names": []
}
